#!/usr/bin/env python

# This is a login information service that is usually scheduled in cron every N minutes

import os, datetime
import argparse
import subprocess
import ConfigParser

def process_parm():
    parser = argparse.ArgumentParser(description = 'System info shows various system information, or write them to motd so that you can see system overview on every login')
    parser.add_argument('-f', '--file', type=str, help='Configuration file')
    parser.add_argument('-V', '--version', action='version', version='system-info 1.0.0.0')
    args = parser.parse_args();
    return args;

def get_command(string):
    return subprocess.check_output(string)

def linecount(string):
    lines = []
    for line in string.split("\n"):
        if (len(line) > 0):
            lines.append(line)
    return len(lines)

def str2bool(string):
    if (string.lower() == "true"):
        return True
    else:
        return False

def split_mem(string):
    result = string.split(":")
    v = result[1].strip();
    v = v.strip(" kB")
    return v


parameters = process_parm();

#########################################################################
# Configuration
#########################################################################

config_target = "screen"
config_motd_path = None
config_motd_source_path = None
config_motd_position = "bottom"
config_max_columns = 4
config_max_width = 80
config_system_users = True
config_system_processinfo = True
config_system_load = True
config_system_memory = True
config_system_swap = True
config_github = True
config_line_prefix = "  "

if (parameters.file is not None):
    config = ConfigParser.ConfigParser()
    config.readfp(open('/etc/login-info.conf'))

    config_target = str2bool(config.get("MOTD", "TargetDevice"))
    config_motd_path = config.get("MOTD", "Path")
    config_motd_source_path = config.get("MOTD", "Source")
    config_motd_position = config.get("MOTD", "Position")
    config_system_users = str2bool(config.get("OS", "UserCount"))
    config_system_processinfo = str2bool(config.get("OS","ProcessCount"))
    config_system_load = str2bool(config.get("OS", "SystemLoad"))

# Generate a screen

screen = "System information as of " + datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S") + ":\n\n"
information = []

# System

if (config_system_users == True):
    information.append("Users logged in: " + str(linecount(get_command("who"))))

if (config_system_load == True):
    information.append("System load: " + str(os.getloadavg()))

if (config_system_processinfo == True):
    information.append("Processes: " + str(linecount(get_command(["ps", '-ef'])) -1))

memory_file = open("/proc/meminfo", "r");
memory_info = memory_file.read()

total_memory = 0
free_memory = 0

for line in memory_info.split("\n"):
    if ("MemTotal" in line):
        total_memory = split_mem(line)
    if ("MemAvailable" in line):
        free_memory = split_mem(line)

free_mem_info = int((float(free_memory) / float(total_memory)) * 100)

if (config_system_memory == True):
    information.append("Free memory: " + str(free_mem_info) + "%\n")

current_line = ""
items = 0
while (len(information) > 0):
    if (len(information[0]) > config_max_width):
        screen += config_line_prefix + information[0] + "\n"
        del information[0]
        continue
    if (len(information) > 1):
        screen += config_line_prefix + '{0:<25} {1:<25}'.format(information[0], information[1]) + "\n";
        del information[0]
        del information[0]
    else:
        screen += config_line_prefix + information[0] + "\n";
        del information[0]

if (config_github == True):
    screen += "Generated by http://github.com/benapetr/system-info\n";
screen += "\n"

source_code = ""

if (config_motd_source_path is not None):
    source_file = open(config_motd_source_path, "r")
    source_code = source_file.read()

if (config_target == "file"):
    source_code += screen
    target = open(config_motd_path, "w")
    target.write(source_code)
elif (config_target == "screen"):
    source_code += screen
    print source_code



